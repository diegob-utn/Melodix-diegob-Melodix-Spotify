@{
    ViewData["Title"] = "Reproductor de Música";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <!-- Lista de reproducción -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Lista de Reproducción
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div id="playlist" class="list-group list-group-flush">
                        <!-- Las pistas se cargarán aquí dinámicamente -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Reproductor principal -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body text-center">
                    <!-- Información de la pista actual -->
                    <div id="track-info" class="mb-4">
                        <div id="track-cover" class="mb-3">
                            <i class="fas fa-music fa-5x text-muted"></i>
                        </div>
                        <h4 id="track-title" class="text-muted">Selecciona una pista para reproducir</h4>
                        <p id="track-artist" class="text-muted mb-0"></p>
                        <p id="track-album" class="text-muted small"></p>
                    </div>

                    <!-- Controles del reproductor -->
                    <div id="player-controls" class="mb-4">
                        <div class="btn-group" role="group">
                            <button id="btn-previous" class="btn btn-outline-primary" disabled>
                                <i class="fas fa-step-backward"></i>
                            </button>
                            <button id="btn-play-pause" class="btn btn-primary btn-lg" disabled>
                                <i class="fas fa-play"></i>
                            </button>
                            <button id="btn-next" class="btn btn-outline-primary" disabled>
                                <i class="fas fa-step-forward"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Barra de progreso -->
                    <div id="progress-container" class="mb-3">
                        <div class="d-flex justify-content-between small text-muted mb-1">
                            <span id="current-time">0:00</span>
                            <span id="total-time">0:00</span>
                        </div>
                        <div class="progress" style="height: 6px; cursor: pointer;">
                            <div id="progress-bar" class="progress-bar bg-primary" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>

                    <!-- Controles de volumen -->
                    <div id="volume-controls" class="row align-items-center">
                        <div class="col-2">
                            <i class="fas fa-volume-down"></i>
                        </div>
                        <div class="col-8">
                            <input type="range" id="volume-slider" class="form-range" min="0" max="100" value="50">
                        </div>
                        <div class="col-2">
                            <i class="fas fa-volume-up"></i>
                        </div>
                    </div>

                    <!-- Elemento de audio oculto -->
                    <audio id="audio-player" preload="metadata"></audio>
                </div>
            </div>

            <!-- Filtros de búsqueda -->
            <div class="card mt-4">
                <div class="card-body">
                    <h6 class="card-title">
                        <i class="fas fa-filter me-2"></i>
                        Filtros
                    </h6>
                    <div class="row">
                        <div class="col-md-4">
                            <select id="filter-genre" class="form-select form-select-sm">
                                <option value="">Todos los géneros</option>
                                <option value="Rock">Rock</option>
                                <option value="Pop">Pop</option>
                                <option value="Jazz">Jazz</option>
                                <option value="Clasica">Clásica</option>
                                <option value="HipHop">Hip Hop</option>
                                <option value="Electronica">Electrónica</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <input type="text" id="filter-artist" class="form-control form-control-sm" placeholder="Buscar artista...">
                        </div>
                        <div class="col-md-4">
                            <button id="btn-refresh" class="btn btn-outline-primary btn-sm">
                                <i class="fas fa-sync-alt me-1"></i>
                                Actualizar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        class MusicPlayer {
            constructor() {
                this.audio = document.getElementById('audio-player');
                this.playlist = [];
                this.currentTrack = -1;
                this.isPlaying = false;
                this.setupEventListeners();
                this.loadPlaylist();
            }

            setupEventListeners() {
                // Controles del reproductor
                document.getElementById('btn-play-pause').addEventListener('click', () => this.togglePlayPause());
                document.getElementById('btn-previous').addEventListener('click', () => this.previousTrack());
                document.getElementById('btn-next').addEventListener('click', () => this.nextTrack());

                // Control de volumen
                document.getElementById('volume-slider').addEventListener('input', (e) => {
                    this.audio.volume = e.target.value / 100;
                });

                // Barra de progreso
                document.querySelector('.progress').addEventListener('click', (e) => this.seekTo(e));

                // Eventos del audio
                this.audio.addEventListener('timeupdate', () => this.updateProgress());
                this.audio.addEventListener('ended', () => this.nextTrack());
                this.audio.addEventListener('loadedmetadata', () => this.updateDuration());

                // Filtros
                document.getElementById('filter-genre').addEventListener('change', () => this.loadPlaylist());
                document.getElementById('filter-artist').addEventListener('input', () => this.debounceFilter());
                document.getElementById('btn-refresh').addEventListener('click', () => this.loadPlaylist());
            }

            async loadPlaylist() {
                try {
                    const genre = document.getElementById('filter-genre').value;
                    const artist = document.getElementById('filter-artist').value;
                    
                    const url = new URL('/Player/ObtenerPlaylist', window.location.origin);
                    if (genre) url.searchParams.append('genero', genre);
                    if (artist) url.searchParams.append('artistaId', artist);

                    const response = await fetch(url);
                    const data = await response.json();

                    if (data.success) {
                        this.playlist = data.pistas;
                        this.renderPlaylist();
                    } else {
                        console.error('Error al cargar playlist:', data.message);
                    }
                } catch (error) {
                    console.error('Error al cargar playlist:', error);
                }
            }

            renderPlaylist() {
                const playlistContainer = document.getElementById('playlist');
                playlistContainer.innerHTML = '';

                this.playlist.forEach((track, index) => {
                    const trackElement = document.createElement('div');
                    trackElement.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-start';
                    trackElement.style.cursor = 'pointer';
                    trackElement.innerHTML = `
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">${track.titulo}</div>
                            <small class="text-muted">${track.artista}</small>
                            ${track.esExplicita ? '<span class="badge bg-warning text-dark ms-1">Explícito</span>' : ''}
                        </div>
                        <small class="text-muted">${track.genero}</small>
                    `;
                    
                    trackElement.addEventListener('click', () => this.playTrack(index));
                    playlistContainer.appendChild(trackElement);
                });

                // Habilitar controles si hay pistas
                const hasTrack = this.playlist.length > 0;
                document.getElementById('btn-play-pause').disabled = !hasTrack;
                document.getElementById('btn-previous').disabled = !hasTrack;
                document.getElementById('btn-next').disabled = !hasTrack;
            }

            playTrack(index) {
                if (index < 0 || index >= this.playlist.length) return;

                this.currentTrack = index;
                const track = this.playlist[index];

                // Actualizar información de la pista
                document.getElementById('track-title').textContent = track.titulo;
                document.getElementById('track-artist').textContent = track.artista;
                document.getElementById('track-album').textContent = track.album;

                // Cargar y reproducir audio
                this.audio.src = track.rutaArchivo;
                this.audio.load();
                this.audio.play();
                this.isPlaying = true;
                this.updatePlayButton();

                // Marcar pista activa en la lista
                this.updateActiveTrack();

                // Registrar reproducción
                this.registerPlay(track.id);
            }

            togglePlayPause() {
                if (this.currentTrack === -1) {
                    if (this.playlist.length > 0) {
                        this.playTrack(0);
                    }
                    return;
                }

                if (this.isPlaying) {
                    this.audio.pause();
                    this.isPlaying = false;
                } else {
                    this.audio.play();
                    this.isPlaying = true;
                }
                this.updatePlayButton();
            }

            previousTrack() {
                if (this.currentTrack > 0) {
                    this.playTrack(this.currentTrack - 1);
                }
            }

            nextTrack() {
                if (this.currentTrack < this.playlist.length - 1) {
                    this.playTrack(this.currentTrack + 1);
                }
            }

            updatePlayButton() {
                const button = document.getElementById('btn-play-pause');
                const icon = button.querySelector('i');
                icon.className = this.isPlaying ? 'fas fa-pause' : 'fas fa-play';
            }

            updateActiveTrack() {
                document.querySelectorAll('#playlist .list-group-item').forEach((item, index) => {
                    item.classList.toggle('active', index === this.currentTrack);
                });
            }

            updateProgress() {
                if (this.audio.duration) {
                    const progress = (this.audio.currentTime / this.audio.duration) * 100;
                    document.getElementById('progress-bar').style.width = progress + '%';
                    document.getElementById('current-time').textContent = this.formatTime(this.audio.currentTime);
                }
            }

            updateDuration() {
                document.getElementById('total-time').textContent = this.formatTime(this.audio.duration);
            }

            seekTo(e) {
                const progressContainer = e.currentTarget;
                const clickX = e.offsetX;
                const width = progressContainer.offsetWidth;
                const newTime = (clickX / width) * this.audio.duration;
                this.audio.currentTime = newTime;
            }

            formatTime(seconds) {
                if (isNaN(seconds)) return '0:00';
                const mins = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${mins}:${secs.toString().padStart(2, '0')}`;
            }

            async registerPlay(trackId) {
                try {
                    await fetch('/Player/RegistrarReproduccion', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({ pistaId: trackId })
                    });
                } catch (error) {
                    console.error('Error al registrar reproducción:', error);
                }
            }

            debounceFilter() {
                clearTimeout(this.filterTimeout);
                this.filterTimeout = setTimeout(() => this.loadPlaylist(), 500);
            }
        }

        // Inicializar el reproductor cuando se carga la página
        document.addEventListener('DOMContentLoaded', () => {
            new MusicPlayer();
        });
    </script>
}
